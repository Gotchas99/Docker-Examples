Object subclass: #Proxy	instanceVariableNames: 'pxString user pwd host port valid'	classVariableNames: ''	poolDictionaries: ''	category: 'CAs-ProxyEnv'!!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:26'!hasPwd	^ pwd isNotNil! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:25'!hasUser	^ user isNotNil! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:25'!user	^ user! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:25'!user: anObject	user := anObject! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!pwd: anObject	pwd := anObject! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!pwd	^ pwd! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!host: anObject	host := anObject! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!port: anObject	port := anObject! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!host	^ host! !!Proxy methodsFor: 'accessing' stamp: 'ChristerAssmundsson 9/13/2016 15:24'!port	^ port! !!Proxy methodsFor: 'parsing' stamp: 'CAs 3/30/2018 16:38'!parse: aString	| tokens |	tokens := (aString findTokens: ':@/') reverse.	tokens isEmpty		ifTrue: [ valid := false.			^ self ].	port := tokens first asInteger.	host := tokens second.	tokens size > 3		ifTrue: [ pwd := tokens third.			user := tokens fourth ].	valid := true.	^ self! !!Proxy methodsFor: 'parsing' stamp: 'CAs 3/30/2018 16:37'!valid	^valid! !!Proxy methodsFor: 'printing' stamp: 'x 4/1/2018 10:53'!printOn: aStream	aStream		nextPutAll: self class name;		nextPut: $(.	user		ifNotNil: [ aStream				print: user;				nextPut: $@ ].	aStream		nextPutAll: host;		nextPut: $:;		print: port;		nextPut: $)! !Object subclass: #ProxyEnv	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CAs-ProxyEnv'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProxyEnv class	instanceVariableNames: ''!!ProxyEnv class methodsFor: 'initialization' stamp: 'x 4/1/2018 10:24'!setProxy: aPxString	| px |	self traceCr: 'Set proxy to:' , aPxString , '*'.	px := Proxy new parse: aPxString.	px valid 		ifFalse: [ self clearProxy.		^	self ].	NetworkSystemSettings useHTTPProxy: true.	NetworkSystemSettings httpProxyServer: px host.	NetworkSystemSettings httpProxyPort: px port.	px hasUser		ifTrue: [ NetworkSystemSettings useNetworkAuthentification: true.			NetworkSystemSettings proxyUser: px user.			NetworkSystemSettings proxyPassword: px pwd ]		ifFalse: [ NetworkSystemSettings useNetworkAuthentification: false ].	self traceCr: 'Proxy setup: ' , px printString.! !!ProxyEnv class methodsFor: 'as yet unclassified' stamp: 'CAs 3/30/2018 12:41'!checkProxyEnv	OSEnvironment current		at: 'http_proxy'		ifPresent: [ :px | 			self setProxy: px.			 ]		ifAbsent:			[ self clearProxy ]! !!ProxyEnv class methodsFor: 'as yet unclassified' stamp: 'ChristerAssmundsson 9/13/2016 11:35'!shutDown: quitting	"Force to detect filesystem after image restart""	self reset"! !!ProxyEnv class methodsFor: 'as yet unclassified' stamp: 'ChristerAssmundsson 9/14/2016 09:27'!startUp: resuming	resuming		ifTrue: [ self traceCr: 'Checking proxy'.					self checkProxyEnv.			self traceCr:  'Proxy init done.' ]! !!ProxyEnv class methodsFor: 'as yet unclassified' stamp: 'ChristerAssmundsson 9/13/2016 11:31'!initialize	SessionManager default registerSystemClassNamed: self name.	self traceCr:  'ProxyEnv class initialized.'! !!ProxyEnv class methodsFor: 'as yet unclassified' stamp: 'CAs 3/30/2018 12:40'!clearProxy	NetworkSystemSettings useHTTPProxy: false.	^ self traceCr: 'No proxy environment var.'! !ProxyEnv initialize!